OPENTEXT - INVIO BOR DA SAP A OTX (NON È UNA SCIENZA ESATTA)

NB Tutto ciò che segue, va effettuato usando l'inglese come lingua di logon
NB L'attività è una cosa congiunta, di conseguenza andranno fatte verifiche con team basis, funzionali e OTX
NB La guida si basa sull'esperienza del invio LFA1, per altri oggetti alcuni punti potrebbero differire, ma è meglio di niente
NB L'INTEGRAZIONE RICHIEDE L'USO DI BUSINESS FUNCTION. PER IL LORO TRASPORTO VERIFICARE LA CR DI CUSTOMIZING PERCHè SAP INSERISCE TUTTE QUELLE ATTIVE IN SVILUPPO

------------------------------------------------------------------------------------------------------------

1 - Assicurarsi che i componenti OTX siano tutti installati

	1.1 Da transazione SPRO, verificare che sia presente la dicitura "Opentext extended ECM for SAP Solutions"
	1.2 Eseguire i programmi di diagnostica dei rami 'Infrastructure' e 'Extended ECM' presenti sotto il ramo citato in 1.1
	1.3 Assicurarsi che l'utenza WF-BATCH ed eventualmente in caso di problemi anche quella in uso, sia mappata lato OTX 

------------------------------------------------------------------------------------------------------------

2 - Tramite transazione SU01, verificare che per l'utenza mappata ( in genere WF-BATCH ), sia attribuito il ruolo e quindi profilo -> '/OTX/RM_USER'

------------------------------------------------------------------------------------------------------------

3 - Nel ramo extended ECM, verificare nella funzione 'Activate Business Function' che siano presenti e attive le BF seguenti: 
	'Utilities/Enterprise_extension/ /OTX/RM_BF_DISP_PRINTLIST'
	'Utilities/Enterprise_extension/ /OTX/RM_BF_GOS_ATTACHMENT'
	'Utilities/Enterprise_extension/ /OTX/RM_DOL_BF_GOS_ATT_LIST'
	
------------------------------------------------------------------------------------------------------------
	
4 - Entrare nel ramo 'Maintain Business Object Declarations' e creare un nuovo record
	
	4.1 Campo Connection ID : da valorizzare tramite matchcode, da accordarsi con i sistemisti per il nome della connessione
	4.2 Property Provider: classe in cui mappare i campi da inviare
		da valorizzare tramite /OTX/RM_WSCI_CL_WSPROV_DEFAULT se si invia un oggetto di default es LFA1, oppure
		creare una propria classe custom ESTENDENDO la sopracitata classe. 
		A fine guida dei dettagli di esempio implementativi
	4.3 Search help name: da valorizzare con un search help standard o custom
	4.4 Use widget UI: da valorizzare con 'X'
	4.5 Activation: 'X'

------------------------------------------------------------------------------------------------------------
	
	NB i seguenti step sono adibiti per triggerare l'evento di CREAZIONE. Per la modifica seguono i dettagli negli step successivi
	
5 - Entrare nel ramo 'Maintain Receiver Module Events' e creare un nuovo record
	
	5.1 Object cateogry : 'BOR Object'
	5.2 Object Type: oggetto dichiarato precedentemente es LFA1
	5.3 Event: Dipende dal matchocde: ad esempio CREATED
	5.3 Receiver Type: Un nome a caso per poter identificare l'evento es LFA1CREATED
	
	5.4 Receiver Call: Di solito FM
	5.5 Receiver Call: Verrà valorizzato con la funzione che catturerà l'evento. Di default si usano /OTX/RM_WSC_UPD oppure /OTX/RM_WSC_UPD_ASYNC (quest ultimo spesso non funziona)
	5.6 Linkage activated: 'X'
	
	Lasciare il resto non valorizzato

------------------------------------------------------------------------------------------------------------

6 - Entrare nel ramo 'Maintain Change Document Events'
	
	6.1 Change doc. Object: Selezionare da matchcode in base a quanto dichiarato nel punto 4. Ad es per LFA1 va impostato KRED
	6.2 Object Type: Valorizzare con lo stesso valore del punto 4 Ad es LFA1
	6.3 Event: Valorizzare con quanto dichiarato nel evento al punto 5 ad es CREATED
	6.4 Trigger Event: On created

------------------------------------------------------------------------------------------------------------

7 - Quanto segue è legato ad eventi di MODIFICA
	Alle volte gli oggetti da inviare non hanno un evento di modifica in lista nei receiver module events.
	Di conseguenza si necessita di crare un sottotipo dell'oggetto originale e associare l'evento di modifica.
	Va quindi effettuato quanto segue

	7.1 Tramite transazione SWO1 inserire nel campo tipo oggetto l'oggetto di riferimento di creazione ad es LFA1 e cliccare sul tastino CREA SOTTOTIPO
		NB Non creare tipi indipendenti altrimenti non funzionerà, è necessario creare solo il sottotipo dell'oggetto dichiarato nei punti precedenti
		   AD es a partire da LFA1 creare ZOTX_LFA1
	7.2 All'uscita della pop-up di creazione oltre i campi scontati inserire nel campo programma un nome utile in quanto questo verrà generato. Idealmente NOME_OGGETTO_PGM
	7.3 Inserire nel campo applicazione il valore '*'
	7.4 Una volta creato, nel nodo interfaces aggiungere il seguente ramo : /OTX/RMWSC
	7.5 Cliccare sul tasto 'PROGRAMMA' e sostituire la riga  "KEY LIKE SWOTOBJID-OBJKEY.
													con le righe  BEGIN OF KEY,
																	VENDORNO LIKE LFA1-LIFNR,
																  END OF KEY.
	7.6	Tramite Elaborare->Modificare stato di rilascio->Tipo oggetto, settare prima in implementato e poi rilasciato posizionandosi sul nodo radice dell'oggetto														  
	7.7 Generare l'oggetto tramite apposito pulsante
	
------------------------------------------------------------------------------------------------------------

8 - Entrare nel ramo 'Maintain Receiver Module Events' e creare un nuovo record
	
	8.1 Object cateogry : 'BOR Object'
	8.2 Object Type: oggetto dichiarato precedentemente es ZOTX_LFA1
	8.3 Event: Dipende dal matchocde: ad esempio CHANGED
	8.3 Receiver Type: Il nome del oggetto padre es LFA1
	
	5.4 Receiver Call: Di solito FM
	5.5 Receiver Call: Verrà valorizzato in caso di sotto oggetto come ZOTX_LFA1 con il FM /OTX/RM_WSC_UPD_SUPERTYPE o con una sua versione Z. A differernza dell'oggetto padre, questo 
		FM consente di esternare da SAP il nome dell'oggetto PADRE evitando ulteriori mapping lato OTX
	5.6 Linkage activated: 'X'
	
	Lasciare il resto non valorizzato

------------------------------------------------------------------------------------------------------------
	
9 - Entrare nel ramo 'Maintain Change Document Events'
	
	9.1 Change doc. Object: Selezionare da matchcode in base a quanto dichiarato nel punto 4. Ad es per LFA1 va impostato KRED
	9.2 Object Type: Valorizzare con il nuovo BOR es ZOTX_LFA1
	9.3 Event: Valorizzare con quanto dichiarato nel evento al punto nel receiver module per il nuovo BOR ad es CHANGED
	9.4 Trigger Event: On Changed
	
	NB il trigger si avvia anche in caso di cambio valori su campi non interessati nel mapping. 
		Va quindi definita una logica ad es. tramite tabelle di storico da implementare prima che vanga avviato il FM Receiver Call Standard
	
------------------------------------------------------------------------------------------------------------

10 - Mapping dei campi
	Il mapping andrà effettuato creando una struttura dedicata a DDIC la quale verrà poi riempita nel PP
	Si fornisce al termine guida quindi, un esempio implementativo del PP, Struttura di Mapping e FM recevier per oggetto LFA1 e ZOTX_LFA1
	
------------------------------------------------------------------------------------------------------------

11 - Tool di migrazione per dati preesistenti
	Il Tool OTX mette a disposizione un tool di generazione report, con lo scopo di creare apposite reportistiche che tramite parametri in input, potranno 
	avviare una migrazione dei dati su OTX pressistenti rispetto alla configurazione illustrata in questa guida.
	Il tool avviabile da SE38 è /OTX/RM_WSC_GENERATE_CREATE. In input ha un unico parametro che sarà il BOR di interesse. Nel caso dell'esempio LFA1.
	Il report generato avrà nomenclatura /OTX/RM_WSC_CREATE_<BOR> quindi in caso di LFA1 sarà /OTX/RM_WSC_CREATE_LFA1

------------------------------------------------------------------------------------------------------------
	
	CUSTOM PROPERTY PROVIDER
	Nome classe ZOTX_CL_PP_VENDOR Extends /OTX/RM_GEN_PP_BO
	
	*----------------------------------------------------------------------*
	*       CLASS ZOTX_CL_PP_VENDOR DEFINITION
	*----------------------------------------------------------------------*
	*
	*----------------------------------------------------------------------*
	class ZOTX_CL_PP_VENDOR definition
	  public
	  inheriting from /OTX/RM_GEN_PP_BO
	  final
	  create public .

	public section.

	  constants C_PP_NAME type STRING value 'ZOTX_CL_PP_VENDOR'. "#EC NOTEXT

	  methods GET_DATA
		redefinition .
	  methods GET_STRUCT_NAME
		redefinition .
	protected section.
	private section.

	  methods GET_VENDOR_DATA
		importing
		  !X_LIFNR type LIFNR
		exporting
		  !Y_VENDOR_DATA type ZOTX_VENDOR_DATA
		exceptions
		  LIFNR_NOT_FOUND .
	ENDCLASS.



	CLASS ZOTX_CL_PP_VENDOR IMPLEMENTATION.


	* <SIGNATURE>---------------------------------------------------------------------------------------+
	* | Instance Public Method ZOTX_CL_PP_VENDOR->GET_DATA
	* +-------------------------------------------------------------------------------------------------+
	* | [--->] PIS_BOR                        TYPE        /OTX/RM_WSCI_S_BOR
	* | [<---] PET_COMPOSITE_CHILDREN         TYPE        /OTX/RM_WSCI_TT_BUSOBJ
	* | [<---] PES_COMPOSITE_PARENT           TYPE        /OTX/RM_WSCI_S_BUSOBJ
	* | [<---] PET_ROLES_USERS                TYPE        /OTX/RM_WSCI_TT_ROLE_USERS
	* | [<---] PET_CHILDREN_EXT               TYPE        /OTX/RM_WSCI_TT_BUSOBJ
	* | [<---] PET_PARENTS_EXT                TYPE        /OTX/RM_WSCI_TT_BUSOBJ
	* | [<---] PET_IDENTICAL_BUSINESS_OBJECTS TYPE        /OTX/RM_WSCI_TT_BUSOBJ
	* | [<---] PE_DATA                        TYPE        ANY
	* | [<---] PET_PARENTS                    TYPE        /OTX/RM_WSCI_TT_BOR
	* | [<---] PET_CHILDREN                   TYPE        /OTX/RM_WSCI_TT_BOR
	* | [<---] PEH_EXCEPTION                  TYPE REF TO /OTX/CX_RM_WSCI_WSPROVIDER
	* | [!CX!] /OTX/CX_RM_WSCI_WSPROVIDER
	* +--------------------------------------------------------------------------------------</SIGNATURE>
	METHOD get_data.
	**TRY.
	*CALL METHOD SUPER->GET_DATA
	*  EXPORTING
	*    PIS_BOR                        = PIS_BOR
	**  IMPORTING
	**    pet_composite_children         = pet_composite_children
	**    pes_composite_parent           = pes_composite_parent
	**    pet_roles_users                = pet_roles_users
	**    pet_children_ext               = pet_children_ext
	**    pet_parents_ext                = pet_parents_ext
	**    pet_identical_business_objects = pet_identical_business_objects
	**    pe_data                        = pe_data
	**    pet_parents                    = pet_parents
	**    pet_children                   = pet_children
	**    peh_exception                  = peh_exception
	*    .
	** CATCH /otx/cx_rm_wsci_wsprovider .
	**ENDTRY.

	  DATA: lv_debug_enabled TYPE xfeld,
			lh_target        TYPE REF TO data,
			lv_lifnr         TYPE lfa1-lifnr,
			ls_vendor_data   TYPE zotx_vendor_data.

	  FIELD-SYMBOLS: <target> TYPE zotx_vendor_data.

	*--------------------------------------------------------------------*
	  "DEBUGGING SECTION
	  lv_debug_enabled = space.
	  SELECT SINGLE debug
		FROM zotx_pp_debug
		INTO lv_debug_enabled
		WHERE pp_name EQ c_pp_name.
	  IF sy-subrc EQ 0
		AND lv_debug_enabled EQ 'X'.

		DO .
		  SELECT COUNT(*) FROM zotx_pp_debug
			WHERE pp_name EQ c_pp_name
			  AND debug   EQ space.
		  CHECK sy-dbcnt EQ 1.
		  EXIT.
		ENDDO.

	  ENDIF.
	*--------------------------------------------------------------------*

	  "Init
	  CREATE DATA lh_target TYPE zotx_vendor_data.
	  ASSIGN lh_target->* TO <target>.
	  CHECK sy-subrc EQ 0.

	  lv_lifnr = pis_bor-id.
	  CHECK lv_lifnr IS NOT INITIAL.

	*--------------------------------------------------------------------*

	  CALL METHOD me->get_vendor_data
		EXPORTING
		  x_lifnr         = lv_lifnr
		IMPORTING
		  y_vendor_data   = ls_vendor_data
		EXCEPTIONS
		  lifnr_not_found = 1
		  OTHERS          = 2.
	  IF sy-subrc <> 0.
	*   Implement suitable error handling here
	  ENDIF.

	  MOVE-CORRESPONDING ls_vendor_data TO <target>.

	  pe_data = <target>.

	ENDMETHOD.


	* <SIGNATURE>---------------------------------------------------------------------------------------+
	* | Instance Public Method ZOTX_CL_PP_VENDOR->GET_STRUCT_NAME
	* +-------------------------------------------------------------------------------------------------+
	* | [--->] PIS_BO_TYPE                    TYPE        SWO_OBJTYP
	* | [<-()] PR_STRUCT_NAME                 TYPE        TABNAME
	* | [!CX!] /OTX/CX_RM_WSCI_WSPROVIDER
	* +--------------------------------------------------------------------------------------</SIGNATURE>
	method GET_STRUCT_NAME.
	**TRY.
	*CALL METHOD SUPER->GET_STRUCT_NAME
	*  EXPORTING
	*    PIS_BO_TYPE    = PIS_BO_TYPE
	*  RECEIVING
	*    PR_STRUCT_NAME = PR_STRUCT_NAME
	*    .
	** CATCH /otx/cx_rm_wsci_wsprovider .
	**ENDTRY.

	  pr_struct_name = 'ZOTX_VENDOR_DATA'.

	endmethod.


	* <SIGNATURE>---------------------------------------------------------------------------------------+
	* | Instance Private Method ZOTX_CL_PP_VENDOR->GET_VENDOR_DATA
	* +-------------------------------------------------------------------------------------------------+
	* | [--->] X_LIFNR                        TYPE        LIFNR
	* | [<---] Y_VENDOR_DATA                  TYPE        ZOTX_VENDOR_DATA
	* | [EXC!] LIFNR_NOT_FOUND
	* +--------------------------------------------------------------------------------------</SIGNATURE>
	METHOD get_vendor_data.

	  TYPES: BEGIN OF ty_lfa1,
			  lifnr TYPE lfa1-lifnr,
			  emnfr TYPE lfa1-emnfr,
			  name1 TYPE lfa1-name1,
			  name2 TYPE lfa1-name2,
			  name3 TYPE lfa1-name3,
			  name4 TYPE lfa1-name4,
			  stcd1 TYPE lfa1-stcd1,
			  stcd3 TYPE lfa1-stcd3,
			  adrnr TYPE lfa1-adrnr,
			 END OF ty_lfa1,

			 BEGIN OF ty_adr6,
			   smtp_addr TYPE adr6-smtp_addr,
			 END OF ty_adr6.

	  CONSTANTS: c_jag_mail   TYPE adrt-remark    VALUE 'POJAGGAER',
				 c_pec_prefix TYPE adr6-smtp_addr VALUE '%@pec%'.

	*--------------------------------------------------------------------*
	  DATA: ls_lfa1       TYPE ty_lfa1,
			lt_adr6       TYPE TABLE OF ty_adr6,
			lv_consnumber TYPE adrt-consnumber,
			lv_mail_contr TYPE adr6-smtp_addr,
			lv_mail_ord   TYPE adr6-smtp_addr,
			lv_mail_pec   TYPE adr6-smtp_addr.

	  FIELD-SYMBOLS: <adr6> LIKE LINE OF lt_adr6.

	*--------------------------------------------------------------------*
	  CLEAR y_vendor_data.

	*--------------------------------------------------------------------*

	  SELECT SINGLE lifnr emnfr
					name1 name2 name3 name4
					stcd1 stcd3 adrnr
		FROM lfa1
		INTO ls_lfa1
		WHERE lifnr EQ x_lifnr.
	  IF sy-subrc <> 0.
		RAISE lifnr_not_found.
	  ENDIF.

	  CLEAR: lv_consnumber, lv_mail_ord.
	  SELECT SINGLE consnumber
		FROM adrt
		INTO lv_consnumber
		WHERE addrnumber EQ ls_lfa1-adrnr
		  AND remark     EQ c_jag_mail.
	  IF sy-subrc EQ 0.


		SELECT SINGLE smtp_addr
		  FROM adr6
		  INTO lv_mail_ord
		  WHERE addrnumber EQ ls_lfa1-adrnr
			AND consnumber EQ lv_consnumber.

	  ENDIF.

	  CLEAR: lv_mail_pec.
	  SELECT SINGLE smtp_addr
		FROM adr6
		INTO lv_mail_pec
		WHERE addrnumber EQ ls_lfa1-adrnr
		  AND smtp_addr  LIKE c_pec_prefix.

	*--------------------------------------------------------------------*

	  "LFA1 Data
	  y_vendor_data-sap_code = ls_lfa1-lifnr.
	  y_vendor_data-jag_code = ls_lfa1-emnfr.
	  CONCATENATE ls_lfa1-name1 ls_lfa1-name2
				  ls_lfa1-name3 ls_lfa1-name4
				  INTO y_vendor_data-rag_soc.
	  CONDENSE y_vendor_data-rag_soc NO-GAPS.
	  y_vendor_data-piva     = ls_lfa1-stcd1.
	  y_vendor_data-cod_fisc = ls_lfa1-stcd3.

	  "ADR6 Data
	  y_vendor_data-mail_contr = ''. "TODO
	  y_vendor_data-mail_pec   = lv_mail_pec.
	  y_vendor_data-mail_ord   = lv_mail_ord.


	*--------------------------------------------------------------------*
	  "Custom test

	  SELECT evento UP TO 1 ROWS
		FROM zs2d_logeventi
		INTO y_vendor_data-evento
		WHERE evento NE space.
	  ENDSELECT.

	ENDMETHOD.
	ENDCLASS.
	
	
	
	
	
	FM Receiver Module Event per oggetto padre LFA1  ZOTX_RM_WSC_UPD 
	FUNCTION zotx_rm_wsc_upd.
	*"----------------------------------------------------------------------
	*"*"Local Interface:
	*"  IMPORTING
	*"     VALUE(OBJTYPE) TYPE  SWETYPECOU-OBJTYPE
	*"     VALUE(OBJKEY) TYPE  SWEINSTCOU-OBJKEY
	*"     VALUE(EVENT) TYPE  SWETYPECOU-EVENT
	*"     VALUE(RECTYPE) TYPE  SWETYPECOU-RECTYPE
	*"  EXPORTING
	*"     VALUE(PE_ERROR_TEXT) TYPE  STRING
	*"     VALUE(PE_LONG_ERROR_TEXT) TYPE  STRING
	*"  TABLES
	*"      EVENT_CONTAINER STRUCTURE  SWCONT
	*"----------------------------------------------------------------------

	  DATA: lv_lifnr TYPE lfa1-lifnr.

	  lv_lifnr = objkey.

	  "Ammessi fornitori JAGGAER
	  SELECT COUNT(*)
		FROM lfa1
		WHERE lifnr EQ lv_lifnr
		  AND emnfr NE space.

	  IF sy-dbcnt EQ 0.
	*    pe_error_text = 'Fornitore non ammesso in OTX'.
		EXIT.
	  ENDIF.

	  CALL FUNCTION '/OTX/RM_WSC_UPD'
		EXPORTING
		  objtype            = objtype
		  objkey             = objkey
		  event              = event
		  rectype            = rectype
		IMPORTING
		  pe_error_text      = pe_error_text
		  pe_long_error_text = pe_long_error_text
		TABLES
		  event_container    = event_container.

	ENDFUNCTION.
	
	
	
	
	FM Receiver Module Event per oggetto figlio ZOTX_LFA1  ZOTX_RM_WSC_UPD_SUPERTYPE
	FUNCTION zotx_rm_wsc_upd_supertype.
	*"----------------------------------------------------------------------
	*"*"Local Interface:
	*"  IMPORTING
	*"     VALUE(OBJTYPE) TYPE  SWETYPECOU-OBJTYPE
	*"     VALUE(OBJKEY) TYPE  SWEINSTCOU-OBJKEY
	*"     VALUE(EVENT) TYPE  SWETYPECOU-EVENT
	*"     VALUE(RECTYPE) TYPE  SWETYPECOU-RECTYPE
	*"  EXPORTING
	*"     VALUE(PE_ERROR_TEXT) TYPE  STRING
	*"     VALUE(PE_LONG_ERROR_TEXT) TYPE  STRING
	*"  TABLES
	*"      EVENT_CONTAINER STRUCTURE  SWCONT
	*"----------------------------------------------------------------------

	  DATA: l_objtype TYPE swetypecou-objtype.

	  l_objtype = rectype.

	  CALL FUNCTION 'ZOTX_RM_WSC_UPD'
		EXPORTING
		  objtype            = l_objtype
		  objkey             = objkey
		  event              = event
		  rectype            = rectype
		IMPORTING
		  pe_error_text      = pe_error_text
		  pe_long_error_text = pe_long_error_text
		TABLES
		  event_container    = event_container.
		  
	ENDFUNCTION.
	
	
	

	Esempio struttura di mapping
	ZOTX_VENDOR_DATA
	
	SAP_CODE	Type	LIFNR		CHAR	10	0	Numero conto del fornitore
	JAG_CODE	Type	EMNFR		CHAR	10	0	Nome esterno usato dal costruttore
	RAG_SOC		Type	TEXT255		CHAR	255	0	Testo (255 posizioni)
	PIVA		Type	STCD1		CHAR	16	0	Partita IVA 1
	COD_FISC	Type	STCD3		CHAR	18	0	Codice fiscale 3
	MAIL_CONTR	Type	AD_SMTPADR	CHAR	241	0	Indirizzo e-mail
	MAIL_PEC	Type	AD_SMTPADR	CHAR	241	0	Indirizzo e-mail
	MAIL_ORD	Type	AD_SMTPADR	CHAR	241	0	Indirizzo e-mail
	EVENTO		Type	ZS2D_EVENTO	CHAR	2	0	Evento
	
	
	
	
	
	SLG1
	SWEL
	
	
